// DatedOp 1.0 [7-Jun-95 @11:10] (LOCAL) - date and operator id of last change
// Copyright 1994-95 York University [generated by: GenASys (beta) 0.3]
/* <<DBO-ProtectedCode>>RCS[start] */
// $Id: DatedOp.hpp,v 1.8 2000/01/29 16:44:08 ed Exp $
/* <<DBO-ProtectedCode>>RCS[end]   */
#ifndef DatedOp_GSYSHXX
#define DatedOp_GSYSHXX

/* <<DBO-ProtectedCode>>UserCustomize Includes[start] */
#include <sisutil/YUBase.hpp>

#ifndef _YU_YUCONT_H_INCLUDED
#include <sisutil/YUCont.hpp>
#define _YU_YUCONT_H_INCLUDED
#endif
#ifndef _YU_YUUUID_H_INCLUDED
#include <sisutil/YUUuid.hpp>
#define _YU_YUUUID_H_INCLUDED
#endif
#ifndef _YU_YUDATE_H_INCLUDED
#include <sisutil/YUDate.hpp>
#define _YU_YUDATE_H_INCLUDED
#endif
#ifndef _YU_YUNUM_H_INCLUDED
#include <sisutil/YUNum.hpp>
#define _YU_YUNUM_H_INCLUDED
#endif
#include <sisutil/RPCMarsh.hpp>
#include <sisutil/OCIMarsh.hpp>
// hacks:
//typedef bool BOOL;
typedef YUUuid YUUUID;
#define DEFSIZE_SETCOUNT mySet.maxSizeASCIIBytes()
#define LIST_APPEND 1
/* <<DBO-ProtectedCode>>UserCustomize Includes[end]   */

//forward:
class DatedOp_SET;

class DatedOp_REF : public YUDBOBase, public YUStreamable
{
protected:
    YUUUID                myOperatorId;
    YUDateTime            myDLC;
public:
    static long           maxLength() { return(52); }
    //canonical:
    DatedOp_REF();
    DatedOp_REF(const DatedOp_REF& rDatedOp_REF);
    DatedOp_REF& operator = (const DatedOp_REF& rDatedOp_REF);
    bool                  operator == (const DatedOp_REF&) const;
    virtual long          getLenRPCMarshall() const { return(maxLength()); }
    void                  initForQuery();
    //accessors (values):
    const YUUUID& getOperatorId() const;
    const YUDateTime& getDLC() const;
    //accessors (properties):
    long                  locateMissingFields() const;
    //mutators:
    DatedOp_REF& setOperatorId(const YUUUID&);
    DatedOp_REF& setDLC(const YUDateTime&);
    //rpc:
    RPCMarshall& Marsh(RPCMarshall&) const;
    friend RPCMarshall& operator << (RPCMarshall& rS, const DatedOp_REF& rO);
    RPCMarshall& UnMarsh(RPCMarshall&);
    friend RPCMarshall& operator >> (RPCMarshall& rS, DatedOp_REF& rO);
    //oci:
    OCIMarshall& Marsh(OCIMarshall&) const;
    friend OCIMarshall& operator << (OCIMarshall& rS, const DatedOp_REF& rO);
    OCIMarshall& UnMarsh(OCIMarshall&);
    friend OCIMarshall& operator >> (OCIMarshall& rS, DatedOp_REF& rO);
    //streamIO:
    ostream& displayOn(std::ostream&) const;
    friend std::ostream& operator << (std::ostream& rS, const DatedOp_REF& rO);
    //delim fstreamIO:
    friend delim_ofstream& operator << (delim_ofstream& rS, const DatedOp_REF& rO);
    friend delim_ifstream& operator >> (delim_ifstream& rS, DatedOp_REF& rO);
private:
    typedef enum ClassDecriptionEnum
    {
        TD_100 = 600, FD_100_OperatorId, FD_100_DLC
    } ClassDecription;

};

class DatedOp : public YUDBOBase, public YUStreamable
{
protected:
    DatedOp_REF           myREF;
public:
    static long     maxLength() { return(0 + DatedOp_REF::maxLength()); }
    //canonical:
    DatedOp();
    DatedOp(const DatedOp_REF& rDatedOp_REF);
    DatedOp(const DatedOp& rDatedOp);
    DatedOp& operator = (const DatedOp& rDatedOp);
    bool                  operator == (const DatedOp& rDatedOp) const; // compare REF's only
    virtual long          getLenRPCMarshall() const { return(maxLength()); }
    //accessors (values):
    operator DatedOp_REF() const { return(getREF()); }
    const DatedOp_REF& getREF() const;
    const YUUUID& getOperatorId() const;
    const YUDateTime& getDLC() const;
    //accessors (properties):
    long                  locateMissingFields() const;
    //mutators:
    DatedOp& setREF(const DatedOp_REF&);
    //rpc:
    RPCMarshall& Marsh(RPCMarshall&) const;
    friend RPCMarshall& operator << (RPCMarshall& rS, const DatedOp& rO);
    RPCMarshall& UnMarsh(RPCMarshall&);
    friend RPCMarshall& operator >> (RPCMarshall& rS, DatedOp& rO);
    //oci:
    OCIMarshall& Marsh(OCIMarshall&) const;
    friend OCIMarshall& operator << (OCIMarshall& rS, const DatedOp& rO);
    OCIMarshall& UnMarsh(OCIMarshall&);
    friend OCIMarshall& operator >> (OCIMarshall& rS, DatedOp& rO);
    //streamIO:
    ostream& displayOn(std::ostream&) const;
    friend std::ostream& operator << (std::ostream& rS, const DatedOp& rO);
    //delimited fstreamIO:
    friend delim_ofstream& operator << (delim_ofstream& rS, const DatedOp& rO);
    friend delim_ifstream& operator >> (delim_ifstream& rS, DatedOp& rO);
};

DECLARE_YUCONTAINER(SETDatedOp, DatedOp_REF);

class DatedOp_SET : public YUDBOBase, public YUStreamable
{
public:
    //canonical - SET:
    DatedOp_SET() : YUDBOBase("DatedOp_SET", dboTLOCAL, dboSTSET) { bValidSet = 0; }
    ~DatedOp_SET();  // calls Clear()

    bool                  IsValidSet() const { return(bValidSet); }
    static long           maxItemSize() { return(DatedOp_REF::maxLength()); }
    virtual long          getLenRPCMarshall() const { return(DEFSIZE_SETCOUNT + 1 + (GetCount() * maxItemSize())); }

    //accessors - SET:
    long                  GetCount() const;
    DatedOp_REF* GetNth(long nPos) const;
    DatedOp_REF* LocateItem(const DatedOp_REF&);
    //mutators - SET:
    void                  Clear(); // does deep delete of set
    bool                  Insert(DatedOp_REF*);
    void                  DeleteItem(DatedOp_REF*); // deep delete of item
    DatedOp_REF* ReplaceItem(DatedOp_REF* pOLD, DatedOp_REF* pNEW);
    friend void           DatedOp_SETSORT(DatedOp_SET*); // implement this if you need to
//rpc - SET:
    RPCMarshall& Marsh(RPCMarshall&) const;
    friend RPCMarshall& operator << (RPCMarshall& rS, const DatedOp_SET& rO) { return(rO.Marsh(rS)); }
    RPCMarshall& UnMarsh(RPCMarshall&);
    friend RPCMarshall& operator >> (RPCMarshall& rS, DatedOp_SET& rO) { return(rO.UnMarsh(rS)); }
    //protected - SET:
    bool                  bValidSet;
    SETDatedOp            mySet;
};
#endif // DatedOp_GSYSHXX
